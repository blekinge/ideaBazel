/* The following code was generated by JFlex 1.4.3 on 4/29/16 5:34 PM */

/* It's an automatically generated code. Do not modify it. */
package dk.statsbiblioteket.bazel.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;
import com.intellij.openapi.util.text.StringUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/29/16 5:34 PM from the specification file
 * <tt>/home/abr/Projects/IdeaBazel/src/dk/statsbiblioteket/bazel/Bazel.flex</tt>
 */
class BazelLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_DOCSTRING_OWNER = 4;
  public static final int PENDING_DOCSTRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\31\1\0\1\30\1\13\22\0\1\26\1\74\1\25"+
    "\1\12\1\0\1\66\1\67\1\23\1\76\1\77\1\63\1\61\1\104"+
    "\1\17\1\15\1\65\1\1\1\5\6\3\2\2\1\105\1\32\1\73"+
    "\1\62\1\72\1\0\1\64\1\4\1\10\1\21\1\4\1\16\1\4"+
    "\3\14\1\20\1\14\1\11\2\14\1\7\2\14\1\22\2\14\1\22"+
    "\2\14\1\6\2\14\1\100\1\24\1\101\1\71\1\14\1\106\1\33"+
    "\1\42\1\44\1\35\1\37\1\51\1\56\1\60\1\47\1\20\1\43"+
    "\1\45\1\55\1\34\1\46\1\53\1\14\1\40\1\36\1\41\1\50"+
    "\1\14\1\57\1\52\1\54\1\14\1\102\1\70\1\103\1\75\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\7\1\11\1\12\1\13\1\14\1\15\20\3"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\1\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\2\43\1\44"+
    "\2\45\1\46\1\3\2\47\3\3\1\41\1\2\4\0"+
    "\1\2\1\50\1\0\1\51\1\3\1\52\1\53\3\7"+
    "\1\54\3\7\15\3\1\55\1\56\1\57\1\60\10\3"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\0\3\45\1\102\3\45\1\3\6\47\1\3"+
    "\2\0\1\103\3\2\1\50\1\0\1\3\1\7\1\104"+
    "\1\105\1\0\1\104\1\106\1\3\1\107\1\110\1\111"+
    "\5\3\1\112\6\3\1\113\5\3\1\114\1\115\1\116"+
    "\1\117\1\0\1\45\1\120\1\121\1\0\1\120\1\3"+
    "\1\47\2\122\3\0\2\123\1\0\1\3\1\124\1\125"+
    "\10\3\1\126\1\3\1\127\3\3\3\0\2\121\12\0"+
    "\2\104\1\0\2\3\1\130\1\3\1\131\1\132\4\3"+
    "\1\133\1\3\1\134\3\0\2\120\4\0\2\122\1\0"+
    "\3\104\1\135\1\136\1\137\1\3\1\140\1\141\1\3"+
    "\1\142\3\120\3\122\1\123\1\0\1\143\2\0\1\3"+
    "\1\144\4\0\2\104\1\145\2\120\2\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\325\0\u0354\0\325\0\325"+
    "\0\325\0\325\0\325\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7"+
    "\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef"+
    "\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927"+
    "\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\325"+
    "\0\325\0\325\0\325\0\325\0\325\0\325\0\325\0\325"+
    "\0\325\0\325\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34\0\325\0\u0c7b"+
    "\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3"+
    "\0\u0efa\0\u0f41\0\u0f88\0\325\0\u0fcf\0\u1016\0\325\0\u105d"+
    "\0\325\0\325\0\u10a4\0\u10eb\0\u1132\0\325\0\u1179\0\u11c0"+
    "\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8"+
    "\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u01aa\0\u01aa"+
    "\0\u01aa\0\u01aa\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c"+
    "\0\u1793\0\u17da\0\325\0\325\0\325\0\u1821\0\325\0\325"+
    "\0\u1868\0\325\0\325\0\325\0\325\0\325\0\u18af\0\325"+
    "\0\325\0\u18f6\0\325\0\u193d\0\u1984\0\u19cb\0\u1a12\0\325"+
    "\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a"+
    "\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u0e25\0\325\0\u1dad\0\u1df4"+
    "\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\325\0\u1f57"+
    "\0\u1fe5\0\u01aa\0\u202c\0\u01aa\0\u01aa\0\u01aa\0\u2073\0\u20ba"+
    "\0\u2101\0\u2148\0\u218f\0\u01aa\0\u21d6\0\u221d\0\u2264\0\u22ab"+
    "\0\u22f2\0\u2339\0\u01aa\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c"+
    "\0\325\0\325\0\325\0\325\0\u24e3\0\u252a\0\u2571\0\325"+
    "\0\u252a\0\u25b8\0\u25ff\0\325\0\u2646\0\u268d\0\u26d4\0\u271b"+
    "\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u01aa\0\u01aa\0\u28c5"+
    "\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u01aa"+
    "\0\u2afd\0\u01aa\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7"+
    "\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf"+
    "\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117"+
    "\0\u315e\0\u01aa\0\u31a5\0\u01aa\0\u01aa\0\u31ec\0\u3233\0\u327a"+
    "\0\u32c1\0\u01aa\0\u3308\0\u01aa\0\u334f\0\u3396\0\u33dd\0\u3424"+
    "\0\u346b\0\u34b2\0\u1bbc\0\u1cd8\0\u34f9\0\u3540\0\u3587\0\u35ce"+
    "\0\u3615\0\u365c\0\u36a3\0\u01aa\0\u01aa\0\u01aa\0\u36ea\0\u01aa"+
    "\0\u01aa\0\u3731\0\u01aa\0\u252a\0\u3778\0\u37bf\0\325\0\u3806"+
    "\0\u384d\0\325\0\u3615\0\325\0\u3894\0\u38db\0\u3922\0\u01aa"+
    "\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u2ffb\0\u30d0\0\u01aa\0\u33dd"+
    "\0\u34b2\0\u34f9\0\u35ce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\6\2\7\1\10\1\7"+
    "\1\11\1\4\1\7\1\12\1\7\1\13\1\7\2\10"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\7\1\27\1\30\1\31\1\32"+
    "\1\7\1\33\1\34\1\35\1\36\1\10\1\37\1\7"+
    "\1\40\1\41\1\7\1\42\1\43\1\7\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\10\72\1\73\1\72\1\74"+
    "\6\72\2\73\1\75\1\15\1\76\1\17\1\20\1\21"+
    "\1\77\6\72\1\73\1\72\1\73\1\72\1\73\3\72"+
    "\1\73\36\72\1\4\1\5\2\6\1\7\1\6\2\7"+
    "\1\100\1\7\1\74\1\4\1\7\1\12\1\7\1\13"+
    "\1\7\2\100\1\101\1\15\1\102\1\17\1\20\1\21"+
    "\1\77\1\23\1\24\1\25\1\26\1\7\1\27\1\103"+
    "\1\31\1\104\1\7\1\105\1\34\1\35\1\36\1\100"+
    "\1\37\1\7\1\40\1\41\1\7\1\42\1\43\1\7"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\106\1\71\110\0\1\107"+
    "\1\110\1\107\1\0\1\107\1\111\1\112\1\113\1\114"+
    "\3\0\1\115\1\116\1\0\1\117\16\0\1\116\2\0"+
    "\1\113\2\0\1\114\1\112\3\0\1\111\35\0\3\6"+
    "\1\0\1\6\3\0\1\114\3\0\1\115\1\116\1\0"+
    "\1\117\16\0\1\116\5\0\1\114\42\0\11\7\2\0"+
    "\1\7\1\0\1\7\1\0\3\7\10\0\26\7\27\0"+
    "\7\7\1\120\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\120\1\14\1\0\1\16\5\0\5\7\1\120"+
    "\1\7\1\120\1\7\1\120\3\7\1\120\10\7\26\0"+
    "\13\11\1\0\15\11\1\0\55\11\1\0\3\115\1\0"+
    "\1\115\163\0\1\121\7\0\1\122\14\0\13\123\1\0"+
    "\7\123\1\124\1\125\4\123\1\126\55\123\13\127\1\0"+
    "\10\127\1\130\1\131\3\127\1\126\55\127\1\0\11\7"+
    "\2\0\1\7\1\0\1\7\1\0\3\7\10\0\1\7"+
    "\1\132\1\7\1\133\22\7\27\0\11\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\10\0\13\7\1\134\12\7"+
    "\27\0\11\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\10\0\4\7\1\135\21\7\27\0\11\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\10\0\12\7\1\136\4\7"+
    "\1\137\6\7\27\0\7\7\1\120\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\120\1\14\1\0\1\16"+
    "\5\0\1\140\3\7\1\141\1\120\1\7\1\120\1\7"+
    "\1\120\3\7\1\120\10\7\27\0\11\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\10\0\5\7\1\142\20\7"+
    "\27\0\7\7\1\120\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\120\1\14\1\0\1\16\5\0\5\7"+
    "\1\143\1\7\1\120\1\7\1\120\3\7\1\120\10\7"+
    "\27\0\7\7\1\120\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\120\1\14\1\0\1\16\5\0\5\7"+
    "\1\120\1\7\1\120\1\7\1\120\1\144\1\145\1\7"+
    "\1\120\10\7\27\0\11\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\10\0\1\146\25\7\27\0\11\7\2\0"+
    "\1\7\1\0\1\7\1\0\3\7\10\0\5\7\1\147"+
    "\20\7\27\0\11\7\2\0\1\7\1\0\1\7\1\0"+
    "\3\7\10\0\1\7\1\150\1\7\1\151\12\7\1\152"+
    "\3\7\1\153\3\7\27\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\5\7\1\154\5\7\1\155"+
    "\1\156\11\7\27\0\11\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\10\0\1\157\25\7\27\0\11\7\2\0"+
    "\1\7\1\0\1\7\1\0\3\7\10\0\14\7\1\160"+
    "\11\7\27\0\11\7\2\0\1\7\1\0\1\7\1\0"+
    "\3\7\10\0\12\7\1\161\13\7\27\0\11\7\2\0"+
    "\1\7\1\0\1\7\1\0\3\7\10\0\25\7\1\162"+
    "\110\0\1\163\106\0\1\164\106\0\1\165\1\166\105\0"+
    "\1\167\106\0\1\170\2\0\1\171\103\0\1\172\106\0"+
    "\1\173\106\0\1\174\106\0\1\175\106\0\1\176\7\0"+
    "\1\177\76\0\1\200\7\0\1\201\1\202\75\0\1\203"+
    "\34\0\1\204\10\0\2\204\1\75\1\0\1\76\12\0"+
    "\1\204\1\0\1\204\1\0\1\204\3\0\1\204\36\0"+
    "\13\74\1\0\15\74\1\0\55\74\13\205\1\0\7\205"+
    "\1\206\1\207\4\205\1\210\55\205\13\211\1\0\10\211"+
    "\1\212\1\213\3\211\1\210\55\211\1\0\7\7\1\214"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\1\7\2\214"+
    "\1\101\1\0\1\102\5\0\5\7\1\214\1\7\1\214"+
    "\1\7\1\214\3\7\1\214\10\7\26\0\13\215\1\0"+
    "\7\215\1\216\1\217\4\215\1\0\55\215\13\220\1\0"+
    "\10\220\1\221\1\222\3\220\1\0\55\220\1\0\7\7"+
    "\1\214\1\7\2\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\214\1\101\1\0\1\102\5\0\1\140\3\7\1\141"+
    "\1\214\1\7\1\214\1\7\1\214\3\7\1\214\10\7"+
    "\27\0\7\7\1\214\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\214\1\101\1\0\1\102\5\0\5\7"+
    "\1\223\1\7\1\214\1\7\1\214\3\7\1\214\10\7"+
    "\27\0\7\7\1\214\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\214\1\101\1\0\1\102\5\0\5\7"+
    "\1\214\1\7\1\214\1\7\1\214\1\144\1\145\1\7"+
    "\1\214\10\7\40\0\1\224\13\0\1\225\2\0\1\226"+
    "\56\0\1\107\1\110\1\107\1\0\1\107\3\0\1\114"+
    "\3\0\1\115\1\116\1\0\1\117\16\0\1\116\5\0"+
    "\1\114\42\0\3\110\1\0\1\110\7\0\1\115\1\116"+
    "\1\0\1\117\16\0\1\116\50\0\5\227\2\0\1\227"+
    "\5\0\1\227\2\0\1\227\11\0\1\227\1\0\1\227"+
    "\1\0\1\227\2\0\1\227\1\0\1\227\4\0\1\227"+
    "\36\0\1\230\1\0\1\230\1\0\1\230\102\0\1\231"+
    "\3\0\1\231\102\0\3\115\1\0\1\115\10\0\1\116"+
    "\1\0\1\117\16\0\1\116\50\0\3\232\1\0\1\232"+
    "\11\0\1\233\41\0\1\233\26\0\7\7\1\234\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\1\7\2\234\1\14"+
    "\1\0\1\16\5\0\5\7\1\234\1\7\1\234\1\7"+
    "\1\234\3\7\1\234\10\7\26\0\13\123\1\0\7\123"+
    "\1\235\1\125\4\123\1\126\55\123\23\0\1\236\1\237"+
    "\1\0\2\240\1\0\2\126\54\0\107\123\13\127\1\0"+
    "\10\127\1\130\1\235\3\127\1\126\164\127\24\0\1\237"+
    "\1\241\2\240\1\0\2\126\55\0\11\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\10\0\2\7\1\242\23\7"+
    "\27\0\11\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\10\0\3\7\1\243\22\7\27\0\11\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\10\0\6\7\1\244\17\7"+
    "\27\0\11\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\10\0\12\7\1\245\3\7\1\246\7\7\27\0\11\7"+
    "\2\0\1\7\1\0\1\7\1\0\3\7\10\0\3\7"+
    "\1\247\10\7\1\250\11\7\27\0\11\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\10\0\11\7\1\251\14\7"+
    "\27\0\11\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\10\0\14\7\1\252\11\7\27\0\11\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\10\0\6\7\1\253\17\7"+
    "\27\0\11\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\10\0\21\7\1\254\4\7\27\0\7\7\1\234\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\1\7\2\234\1\14"+
    "\1\0\1\16\5\0\4\7\1\255\1\234\1\7\1\234"+
    "\1\7\1\234\3\7\1\234\10\7\27\0\11\7\2\0"+
    "\1\7\1\0\1\7\1\0\3\7\10\0\1\256\25\7"+
    "\27\0\11\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\10\0\1\7\1\257\24\7\27\0\11\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\10\0\22\7\1\260\3\7"+
    "\27\0\11\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\10\0\20\7\1\261\5\7\27\0\11\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\10\0\13\7\1\262\12\7"+
    "\27\0\11\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\10\0\5\7\1\263\20\7\27\0\11\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\10\0\1\7\1\264\24\7"+
    "\27\0\11\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\10\0\3\7\1\265\22\7\27\0\11\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\10\0\4\7\1\266\21\7"+
    "\27\0\11\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\10\0\13\7\1\267\12\7\27\0\11\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\10\0\14\7\1\270\11\7"+
    "\110\0\1\271\106\0\1\272\106\0\1\273\106\0\1\274"+
    "\34\0\1\275\10\0\2\275\1\75\1\0\1\76\12\0"+
    "\1\275\1\0\1\275\1\0\1\275\3\0\1\275\36\0"+
    "\13\205\1\0\7\205\1\276\1\207\4\205\1\210\55\205"+
    "\23\0\1\277\1\300\1\0\2\301\1\0\2\210\54\0"+
    "\107\205\13\211\1\0\10\211\1\212\1\276\3\211\1\210"+
    "\164\211\24\0\1\300\1\302\2\301\1\0\2\210\55\0"+
    "\7\7\1\303\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\303\1\101\1\0\1\102\5\0\5\7\1\303"+
    "\1\7\1\303\1\7\1\303\3\7\1\303\10\7\26\0"+
    "\13\215\1\0\7\215\1\304\1\217\4\215\1\0\55\215"+
    "\23\0\1\305\63\0\107\215\13\220\1\0\10\220\1\221"+
    "\1\304\3\220\1\0\164\220\25\0\1\306\62\0\7\7"+
    "\1\303\1\7\2\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\303\1\101\1\0\1\102\5\0\4\7\1\255\1\303"+
    "\1\7\1\303\1\7\1\303\3\7\1\303\10\7\26\0"+
    "\13\224\1\0\15\224\1\226\55\224\1\0\5\227\2\0"+
    "\1\227\1\114\4\0\1\227\2\0\1\227\11\0\1\227"+
    "\1\0\1\227\1\0\1\227\2\0\1\227\1\0\1\227"+
    "\1\114\3\0\1\227\36\0\1\230\1\0\1\230\1\0"+
    "\1\230\3\0\1\114\33\0\1\114\42\0\1\231\3\0"+
    "\1\231\3\0\1\114\33\0\1\114\42\0\3\232\1\0"+
    "\1\232\12\0\1\117\67\0\3\232\1\0\1\232\102\0"+
    "\11\7\2\0\1\7\1\0\1\7\1\0\3\7\1\307"+
    "\1\0\1\310\5\0\26\7\52\0\1\237\1\0\2\240"+
    "\1\0\2\126\54\0\23\236\1\311\1\312\62\236\24\241"+
    "\1\313\1\314\61\241\1\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\4\7\1\315\21\7\27\0"+
    "\11\7\2\0\1\7\1\0\1\7\1\0\3\7\10\0"+
    "\4\7\1\316\21\7\27\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\16\7\1\317\7\7\27\0"+
    "\11\7\2\0\1\7\1\0\1\7\1\0\3\7\10\0"+
    "\4\7\1\320\21\7\27\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\3\7\1\321\22\7\27\0"+
    "\11\7\2\0\1\7\1\0\1\7\1\0\3\7\10\0"+
    "\15\7\1\322\10\7\27\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\1\323\25\7\27\0\11\7"+
    "\2\0\1\7\1\0\1\7\1\0\3\7\10\0\3\7"+
    "\1\324\22\7\27\0\11\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\10\0\6\7\1\325\17\7\27\0\11\7"+
    "\2\0\1\7\1\0\1\7\1\0\3\7\10\0\7\7"+
    "\1\326\16\7\27\0\11\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\10\0\13\7\1\327\12\7\27\0\11\7"+
    "\2\0\1\7\1\0\1\7\1\0\3\7\10\0\22\7"+
    "\1\330\3\7\27\0\11\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\10\0\1\331\25\7\27\0\11\7\2\0"+
    "\1\7\1\0\1\7\1\0\3\7\10\0\3\7\1\332"+
    "\22\7\27\0\11\7\2\0\1\7\1\0\1\7\1\0"+
    "\3\7\10\0\12\7\1\333\13\7\27\0\11\7\2\0"+
    "\1\7\1\0\1\7\1\0\3\7\10\0\7\7\1\334"+
    "\16\7\27\0\11\7\2\0\1\7\1\0\1\7\1\0"+
    "\3\7\10\0\12\7\1\335\13\7\51\0\1\336\1\0"+
    "\1\337\105\0\1\300\1\0\2\301\1\0\2\210\54\0"+
    "\23\277\1\340\1\341\62\277\24\302\1\342\1\343\61\302"+
    "\1\0\11\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\1\344\1\0\1\345\5\0\26\7\26\0\23\305\1\346"+
    "\1\347\62\305\24\306\1\350\1\351\61\306\23\0\1\352"+
    "\110\0\1\353\61\0\23\236\1\354\1\355\171\236\133\241"+
    "\1\356\1\357\61\241\1\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\5\7\1\360\20\7\27\0"+
    "\11\7\2\0\1\7\1\0\1\7\1\0\3\7\10\0"+
    "\20\7\1\361\5\7\27\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\4\7\1\362\21\7\27\0"+
    "\11\7\2\0\1\7\1\0\1\7\1\0\3\7\10\0"+
    "\5\7\1\363\20\7\27\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\10\7\1\364\15\7\27\0"+
    "\11\7\2\0\1\7\1\0\1\7\1\0\3\7\10\0"+
    "\3\7\1\365\22\7\27\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\14\7\1\366\11\7\27\0"+
    "\11\7\2\0\1\7\1\0\1\7\1\0\3\7\10\0"+
    "\2\7\1\367\23\7\27\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\5\7\1\370\20\7\27\0"+
    "\11\7\2\0\1\7\1\0\1\7\1\0\3\7\10\0"+
    "\12\7\1\371\13\7\27\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\2\7\1\372\23\7\27\0"+
    "\11\7\2\0\1\7\1\0\1\7\1\0\3\7\10\0"+
    "\1\373\25\7\27\0\11\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\10\0\4\7\1\374\21\7\51\0\1\375"+
    "\110\0\1\376\61\0\23\277\1\377\1\u0100\171\277\133\302"+
    "\1\u0101\1\u0102\61\302\23\0\1\u0103\110\0\1\u0104\61\0"+
    "\23\305\1\u0105\1\u0106\171\305\133\306\1\u0107\1\u0108\61\306"+
    "\23\0\1\236\110\0\1\241\61\0\23\236\1\u0109\1\355"+
    "\105\236\1\u010a\1\355\62\236\24\241\1\356\1\u010b\105\241"+
    "\1\356\1\u0109\61\241\1\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\6\7\1\u010c\17\7\27\0"+
    "\11\7\2\0\1\7\1\0\1\7\1\0\3\7\10\0"+
    "\6\7\1\u010d\17\7\27\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\1\7\1\u010e\24\7\27\0"+
    "\11\7\2\0\1\7\1\0\1\7\1\0\3\7\10\0"+
    "\1\7\1\u010f\24\7\27\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\1\u0110\25\7\27\0\11\7"+
    "\2\0\1\7\1\0\1\7\1\0\3\7\10\0\6\7"+
    "\1\u0111\17\7\27\0\11\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\10\0\12\7\1\u0112\13\7\27\0\11\7"+
    "\2\0\1\7\1\0\1\7\1\0\3\7\10\0\12\7"+
    "\1\u0113\13\7\51\0\1\277\110\0\1\302\61\0\23\277"+
    "\1\u0114\1\u0100\105\277\1\u0115\1\u0100\62\277\24\302\1\u0101"+
    "\1\u0116\105\302\1\u0101\1\u0114\61\302\23\305\1\u0117\1\u0106"+
    "\105\305\1\u0118\1\u0106\62\305\24\306\1\u0107\1\u0119\105\306"+
    "\1\u0107\1\u0117\61\306\24\0\1\u011a\1\0\2\u011b\1\0"+
    "\2\u011c\54\0\23\236\1\u011d\1\355\62\236\24\241\1\356"+
    "\1\u011e\61\241\1\0\11\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\10\0\15\7\1\u011f\10\7\27\0\11\7"+
    "\2\0\1\7\1\0\1\7\1\0\3\7\10\0\21\7"+
    "\1\u0120\4\7\26\0\23\277\1\u0121\1\u0100\62\277\24\302"+
    "\1\u0101\1\u0122\61\302\23\305\1\u0123\1\u0106\62\305\24\306"+
    "\1\u0107\1\u0124\61\306\23\236\1\u0125\1\355\62\236\24\241"+
    "\1\356\1\u0126\61\241\1\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\10\0\4\7\1\u0127\21\7\26\0"+
    "\23\277\1\u0128\1\u0100\62\277\24\302\1\u0101\1\u0129\61\302"+
    "\23\305\1\u012a\1\u0106\62\305\24\306\1\u0107\1\u012b\61\306";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14981];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\10\1\1\11\1\1\5\11\34\1\13\11"+
    "\4\1\1\11\10\1\4\0\1\11\1\1\1\0\1\11"+
    "\1\1\2\11\3\1\1\11\34\1\3\11\1\1\2\11"+
    "\1\1\5\11\1\1\2\11\1\1\1\11\1\0\3\1"+
    "\1\11\13\1\2\0\1\11\4\1\1\0\3\1\1\11"+
    "\1\0\30\1\4\11\1\0\2\1\1\11\1\0\2\1"+
    "\1\11\2\1\3\0\2\1\1\0\21\1\3\0\2\1"+
    "\12\0\2\1\1\0\15\1\3\0\2\1\4\0\2\1"+
    "\1\0\16\1\1\11\2\1\1\11\1\0\1\11\2\0"+
    "\2\1\4\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private int getSpaceLength(CharSequence string) {
String string1 = string.toString();
string1 = StringUtil.trimEnd(string1, "\\");
string1 = StringUtil.trimEnd(string1, ";");
final String s = StringUtil.trimTrailing(string1);
return yylength()-s.length();

}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BazelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 91: 
          { return PyTokenTypes.YIELD_KEYWORD;
          }
        case 102: break;
        case 83: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
          }
        case 103: break;
        case 2: 
          { return PyTokenTypes.INTEGER_LITERAL;
          }
        case 104: break;
        case 18: 
          { return PyTokenTypes.DIV;
          }
        case 105: break;
        case 19: 
          { return PyTokenTypes.PERC;
          }
        case 106: break;
        case 8: 
          { return PyTokenTypes.BACKSLASH;
          }
        case 107: break;
        case 27: 
          { return PyTokenTypes.RPAR;
          }
        case 108: break;
        case 1: 
          { return PyTokenTypes.BAD_CHARACTER;
          }
        case 109: break;
        case 30: 
          { return PyTokenTypes.LBRACE;
          }
        case 110: break;
        case 73: 
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD;
          }
        case 111: break;
        case 35: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 112: break;
        case 90: 
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD;
          }
        case 113: break;
        case 81: 
          { yypushback(getSpaceLength(yytext())); return PyTokenTypes.DOCSTRING;
          }
        case 114: break;
        case 6: 
          { return PyTokenTypes.MINUS;
          }
        case 115: break;
        case 7: 
          { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 116: break;
        case 89: 
          { return PyTokenTypes.BREAK_KEYWORD;
          }
        case 117: break;
        case 29: 
          { return PyTokenTypes.RBRACKET;
          }
        case 118: break;
        case 66: 
          { yypushback(getSpaceLength(yytext())); yybegin(YYINITIAL); return PyTokenTypes.DOCSTRING;
          }
        case 119: break;
        case 5: 
          { return PyTokenTypes.DOT;
          }
        case 120: break;
        case 3: 
          { return PyTokenTypes.IDENTIFIER;
          }
        case 121: break;
        case 26: 
          { return PyTokenTypes.LPAR;
          }
        case 122: break;
        case 24: 
          { return PyTokenTypes.LT;
          }
        case 123: break;
        case 46: 
          { return PyTokenTypes.IN_KEYWORD;
          }
        case 124: break;
        case 88: 
          { return PyTokenTypes.RAISE_KEYWORD;
          }
        case 125: break;
        case 78: 
          { return PyTokenTypes.GTGTEQ;
          }
        case 126: break;
        case 9: 
          { return PyTokenTypes.SPACE;
          }
        case 127: break;
        case 94: 
          { return PyTokenTypes.EXCEPT_KEYWORD;
          }
        case 128: break;
        case 41: 
          { return PyTokenTypes.IMAGINARY_LITERAL;
          }
        case 129: break;
        case 39: 
          { return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 130: break;
        case 11: 
          { return PyTokenTypes.FORMFEED;
          }
        case 131: break;
        case 13: 
          { return PyTokenTypes.SEMICOLON;
          }
        case 132: break;
        case 23: 
          { return PyTokenTypes.GT;
          }
        case 133: break;
        case 28: 
          { return PyTokenTypes.LBRACKET;
          }
        case 134: break;
        case 33: 
          { return PyTokenTypes.COLON;
          }
        case 135: break;
        case 79: 
          { return PyTokenTypes.LTLTEQ;
          }
        case 136: break;
        case 53: 
          { return PyTokenTypes.ATEQ;
          }
        case 137: break;
        case 84: 
          { return PyTokenTypes.ELSE_KEYWORD;
          }
        case 138: break;
        case 21: 
          { return PyTokenTypes.OR;
          }
        case 139: break;
        case 69: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
          }
        case 140: break;
        case 68: 
          { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 141: break;
        case 51: 
          { return PyTokenTypes.MULTEQ;
          }
        case 142: break;
        case 100: 
          { return PyTokenTypes.FINALLY_KEYWORD;
          }
        case 143: break;
        case 92: 
          { return PyTokenTypes.WHILE_KEYWORD;
          }
        case 144: break;
        case 16: 
          { return PyTokenTypes.MULT;
          }
        case 145: break;
        case 93: 
          { return PyTokenTypes.ASSERT_KEYWORD;
          }
        case 146: break;
        case 55: 
          { return PyTokenTypes.FLOORDIV;
          }
        case 147: break;
        case 98: 
          { return PyTokenTypes.GLOBAL_KEYWORD;
          }
        case 148: break;
        case 37: 
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 149: break;
        case 96: 
          { return PyTokenTypes.LAMBDA_KEYWORD;
          }
        case 150: break;
        case 59: 
          { return PyTokenTypes.XOREQ;
          }
        case 151: break;
        case 75: 
          { return PyTokenTypes.FOR_KEYWORD;
          }
        case 152: break;
        case 17: 
          { return PyTokenTypes.AT;
          }
        case 153: break;
        case 71: 
          { return PyTokenTypes.NOT_KEYWORD;
          }
        case 154: break;
        case 14: 
          { return PyTokenTypes.PLUS;
          }
        case 155: break;
        case 42: 
          { return PyTokenTypes.MINUSEQ;
          }
        case 156: break;
        case 65: 
          { return PyTokenTypes.NE;
          }
        case 157: break;
        case 32: 
          { return PyTokenTypes.COMMA;
          }
        case 158: break;
        case 50: 
          { return PyTokenTypes.EQEQ;
          }
        case 159: break;
        case 34: 
          { return PyTokenTypes.TICK;
          }
        case 160: break;
        case 52: 
          { return PyTokenTypes.EXP;
          }
        case 161: break;
        case 82: 
          { return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 162: break;
        case 101: 
          { return PyTokenTypes.CONTINUE_KEYWORD;
          }
        case 163: break;
        case 64: 
          { return PyTokenTypes.LTLT;
          }
        case 164: break;
        case 62: 
          { return PyTokenTypes.LE;
          }
        case 165: break;
        case 70: 
          { return PyTokenTypes.AND_KEYWORD;
          }
        case 166: break;
        case 45: 
          { return PyTokenTypes.OR_KEYWORD;
          }
        case 167: break;
        case 4: 
          { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 168: break;
        case 44: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
          }
        case 169: break;
        case 87: 
          { return PyTokenTypes.PASS_KEYWORD;
          }
        case 170: break;
        case 67: 
          { yypushback(yylength()-1); yybegin(PENDING_DOCSTRING); return PyTokenTypes.COLON;
          }
        case 171: break;
        case 36: 
          { return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 172: break;
        case 99: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
          }
        case 173: break;
        case 58: 
          { return PyTokenTypes.OREQ;
          }
        case 174: break;
        case 61: 
          { return PyTokenTypes.GTGT;
          }
        case 175: break;
        case 20: 
          { return PyTokenTypes.AND;
          }
        case 176: break;
        case 54: 
          { return PyTokenTypes.DIVEQ;
          }
        case 177: break;
        case 95: 
          { return PyTokenTypes.RETURN_KEYWORD;
          }
        case 178: break;
        case 97: 
          { return PyTokenTypes.IMPORT_KEYWORD;
          }
        case 179: break;
        case 60: 
          { return PyTokenTypes.GE;
          }
        case 180: break;
        case 49: 
          { return PyTokenTypes.PLUSEQ;
          }
        case 181: break;
        case 80: 
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 182: break;
        case 47: 
          { return PyTokenTypes.IS_KEYWORD;
          }
        case 183: break;
        case 77: 
          { return PyTokenTypes.FLOORDIVEQ;
          }
        case 184: break;
        case 40: 
          { return PyTokenTypes.FLOAT_LITERAL;
          }
        case 185: break;
        case 38: 
          { return PyTokenTypes.LINE_BREAK;
          }
        case 186: break;
        case 56: 
          { return PyTokenTypes.PERCEQ;
          }
        case 187: break;
        case 74: 
          { return PyTokenTypes.TRY_KEYWORD;
          }
        case 188: break;
        case 57: 
          { return PyTokenTypes.ANDEQ;
          }
        case 189: break;
        case 15: 
          { return PyTokenTypes.EQ;
          }
        case 190: break;
        case 86: 
          { return PyTokenTypes.FROM_KEYWORD;
          }
        case 191: break;
        case 12: 
          { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyTokenTypes.LINE_BREAK;
          }
        case 192: break;
        case 76: 
          { return PyTokenTypes.EXPEQ;
          }
        case 193: break;
        case 85: 
          { return PyTokenTypes.ELIF_KEYWORD;
          }
        case 194: break;
        case 43: 
          { return PyTokenTypes.RARROW;
          }
        case 195: break;
        case 31: 
          { return PyTokenTypes.RBRACE;
          }
        case 196: break;
        case 48: 
          { return PyTokenTypes.IF_KEYWORD;
          }
        case 197: break;
        case 10: 
          { return PyTokenTypes.TAB;
          }
        case 198: break;
        case 63: 
          { return PyTokenTypes.NE_OLD;
          }
        case 199: break;
        case 25: 
          { return PyTokenTypes.TILDE;
          }
        case 200: break;
        case 72: 
          { return PyTokenTypes.DEL_KEYWORD;
          }
        case 201: break;
        case 22: 
          { return PyTokenTypes.XOR;
          }
        case 202: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
